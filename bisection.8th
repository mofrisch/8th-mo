\ -*- 8th -*-
\ BSD 3-Clause License

\ Copyright (c) 2020, Moritz Frisch
\ All rights reserved.

\ Redistribution and use in source and binary forms, with or without
\ modification, are permitted provided that the following conditions are met:

\ 1. Redistributions of source code must retain the above copyright notice, this
\   list of conditions and the following disclaimer.

\ 2. Redistributions in binary form must reproduce the above copyright notice,
\   this list of conditions and the following disclaimer in the documentation
\   and/or other materials provided with the distribution.

\ 3. Neither the name of the copyright holder nor the names of its
\  contributors may be used to endorse or promote products derived from
\   this software without specific prior written permission.

\ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
\ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
\ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
\ DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
\ FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
\ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
\ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
\ CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
\ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
\ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

needs numerics
needs tools

var f(a)

: f-test \ n -- n
   \ f(x)=x^3+4x^2-10
   dup >r 4 n:+ r@ n:* r> n:* 10 n:- ;

: midpoint \ a b -- a+(b-a)/2
   over n:- 2 n:/ n:+ ; 

: print-row \ n a b p f(p) lines -- n a b p f(p)
   num-debug @ if
      5 pick swap n:mod 0 = if
         4 #> 4 pick . " " . 
         3 pick f. " " .
         2 pick f. " " .
         1 pick f. " " .
         0 pick f. " " .
         3 pick 2 pick n:- n:abs f. 
         cr 
      then 
   else drop then ;

: criterion \ n b p f(p) -- n b p f(p) ?
   dup 0 eps f~ >r 
   -rot 2dup eps f~ >r rot 
   2r> or ;

: next-interval \ a b n --  a p | p b
   dup max-iterations @ n:= if ;; then
   -rot 2dup midpoint dup f \ n a b p f(p)
   criterion if 
      1 print-row 
      break 
   else
      print-lines @ print-row
      f(a) @ over n:* 0 n:> if \ n a b p f(p) f(a)*f(p)>0
         f(a) ! rot drop swap \ n a b p 
      else 
         drop nip \ n a b 
   then then rot drop ; 

: bisection \ a b -- a b
   over f f(a) ! 
   num-debug @ if
   "n     a                       b                       p                       f(p)                    |a-b| " . cr
   124 draw-line cr
   then
   ' next-interval 0 max-iterations @ loop .s
   num-debug @ if 124 draw-line cr then
   max-iterations @ n:= if
      "ran " . max-iterations @ . " iterations, but result was not close enough" . cr then 
    ;

true num-debug !


(* 1 print-lines !
40 big-floats
\ 1e-16 eps!
' f-test w:is f *)
F1. 2. bisection 2dup f. f. n:- n:abs f. cr





